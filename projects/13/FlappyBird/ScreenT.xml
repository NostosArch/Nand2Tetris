<tokens>
	<keyword>class</keyword>
	<identifier>Screen</identifier>
	<symbol>{</symbol>
	<keyword>static</keyword>
	<keyword>boolean</keyword>
	<identifier>color</identifier>
	<symbol>;</symbol>
	<keyword>static</keyword>
	<identifier>Array</identifier>
	<identifier>screen</identifier>
	<symbol>;</symbol>
	<keyword>static</keyword>
	<identifier>Array</identifier>
	<identifier>bitmap</identifier>
	<symbol>;</symbol>
	<keyword>static</keyword>
	<identifier>Array</identifier>
	<identifier>fill</identifier>
	<symbol>;</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>init</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>color</identifier>
	<symbol>=</symbol>
	<keyword>true</keyword>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>=</symbol>
	<integerConstant>16384</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>=</symbol>
	<identifier>Array</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>15</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<integerConstant>32767</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>14</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>16384</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>13</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>8192</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>12</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>4096</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>11</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>2048</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>10</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>1024</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>9</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>512</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>8</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>256</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>7</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>128</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>6</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>64</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>5</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>32</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>4</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>16</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>3</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>8</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>2</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>4</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>2</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>=</symbol>
	<identifier>Array</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>17</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>16</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>15</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>14</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>3</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>13</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>7</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>12</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>15</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>11</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>31</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>10</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>63</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>9</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>127</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>8</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>255</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>7</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>511</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>6</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>1023</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>5</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>2047</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>4</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>4095</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>3</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>8191</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>2</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>16383</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>32767</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>clearScreen</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>row</identifier>
	<symbol>,</symbol>
	<identifier>col</identifier>
	<symbol>,</symbol>
	<identifier>row_address</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>row</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>col</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<identifier>row</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>256</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>row_address</identifier>
	<symbol>=</symbol>
	<identifier>row</identifier>
	<symbol>*</symbol>
	<integerConstant>32</integerConstant>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<identifier>col</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>32</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>row_address</identifier>
	<symbol>+</symbol>
	<identifier>col</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>col</identifier>
	<symbol>=</symbol>
	<identifier>col</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>row</identifier>
	<symbol>=</symbol>
	<identifier>row</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>setColor</identifier>
	<symbol>(</symbol>
	<keyword>boolean</keyword>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>color</identifier>
	<symbol>=</symbol>
	<identifier>b</identifier>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>drawPixel</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>x</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>y</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>address</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>rem</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>address</identifier>
	<symbol>=</symbol>
	<symbol>(</symbol>
	<integerConstant>32</integerConstant>
	<symbol>*</symbol>
	<identifier>y</identifier>
	<symbol>+</symbol>
	<symbol>(</symbol>
	<identifier>x</identifier>
	<symbol>/</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>rem</identifier>
	<symbol>=</symbol>
	<identifier>x</identifier>
	<symbol>&amp;</symbol>
	<integerConstant>15</integerConstant>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>color</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>|</symbol>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<identifier>rem</identifier>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<identifier>bitmap</identifier>
	<symbol>[</symbol>
	<identifier>rem</identifier>
	<symbol>]</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>drawLine</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>x1</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>y1</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>x2</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>y2</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>a</identifier>
	<symbol>,</symbol>
	<identifier>b</identifier>
	<symbol>,</symbol>
	<identifier>dy</identifier>
	<symbol>,</symbol>
	<identifier>dx</identifier>
	<symbol>,</symbol>
	<identifier>adyMinusbdx</identifier>
	<symbol>,</symbol>
	<identifier>rem_xA</identifier>
	<symbol>,</symbol>
	<identifier>rem_xB</identifier>
	<symbol>,</symbol>
	<identifier>xA</identifier>
	<symbol>,</symbol>
	<identifier>xB</identifier>
	<symbol>,</symbol>
	<identifier>yA</identifier>
	<symbol>,</symbol>
	<identifier>yB</identifier>
	<symbol>,</symbol>
	<identifier>address</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>a</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>b</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>adyMinusbdx</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>x1</identifier>
	<symbol>&lt;</symbol>
	<identifier>x2</identifier>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>&lt;</symbol>
	<identifier>y2</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>x1</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>xB</identifier>
	<symbol>=</symbol>
	<identifier>x2</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>yA</identifier>
	<symbol>=</symbol>
	<identifier>y1</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>yB</identifier>
	<symbol>=</symbol>
	<identifier>y2</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>x2</identifier>
	<symbol>&lt;</symbol>
	<identifier>x1</identifier>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>y2</identifier>
	<symbol>&lt;</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>x2</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>xB</identifier>
	<symbol>=</symbol>
	<identifier>x1</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>yA</identifier>
	<symbol>=</symbol>
	<identifier>y2</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>yB</identifier>
	<symbol>=</symbol>
	<identifier>y1</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>x1</identifier>
	<symbol>&lt;</symbol>
	<identifier>x2</identifier>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>&gt;</symbol>
	<identifier>y2</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>x1</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>xB</identifier>
	<symbol>=</symbol>
	<identifier>x2</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>yA</identifier>
	<symbol>=</symbol>
	<identifier>y1</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>yB</identifier>
	<symbol>=</symbol>
	<identifier>y2</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>x1</identifier>
	<symbol>&gt;</symbol>
	<identifier>x2</identifier>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>&lt;</symbol>
	<identifier>y2</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>x2</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>xB</identifier>
	<symbol>=</symbol>
	<identifier>x1</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>yA</identifier>
	<symbol>=</symbol>
	<identifier>y2</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>yB</identifier>
	<symbol>=</symbol>
	<identifier>y1</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>x1</identifier>
	<symbol>=</symbol>
	<identifier>x2</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>=</symbol>
	<identifier>y2</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Screen</identifier>
	<symbol>.</symbol>
	<identifier>drawPixel</identifier>
	<symbol>(</symbol>
	<identifier>x1</identifier>
	<symbol>,</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>y2</identifier>
	<symbol>&lt;</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>b</identifier>
	<symbol>&gt;</symbol>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>-</symbol>
	<identifier>y2</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Screen</identifier>
	<symbol>.</symbol>
	<identifier>drawPixel</identifier>
	<symbol>(</symbol>
	<identifier>x1</identifier>
	<symbol>,</symbol>
	<identifier>y2</identifier>
	<symbol>+</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>b</identifier>
	<symbol>=</symbol>
	<identifier>b</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>b</identifier>
	<symbol>&gt;</symbol>
	<symbol>(</symbol>
	<identifier>y2</identifier>
	<symbol>-</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Screen</identifier>
	<symbol>.</symbol>
	<identifier>drawPixel</identifier>
	<symbol>(</symbol>
	<identifier>x1</identifier>
	<symbol>,</symbol>
	<identifier>y1</identifier>
	<symbol>+</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>b</identifier>
	<symbol>=</symbol>
	<identifier>b</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>=</symbol>
	<identifier>y2</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>x1</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>xB</identifier>
	<symbol>=</symbol>
	<identifier>x2</identifier>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>x2</identifier>
	<symbol>&lt;</symbol>
	<identifier>x1</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>x2</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>xB</identifier>
	<symbol>=</symbol>
	<identifier>x1</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>rem_xA</identifier>
	<symbol>=</symbol>
	<integerConstant>16</integerConstant>
	<symbol>-</symbol>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>&amp;</symbol>
	<integerConstant>15</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>rem_xB</identifier>
	<symbol>=</symbol>
	<identifier>xB</identifier>
	<symbol>&amp;</symbol>
	<integerConstant>15</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>xA</identifier>
	<symbol>-</symbol>
	<symbol>(</symbol>
	<integerConstant>16</integerConstant>
	<symbol>-</symbol>
	<identifier>rem_xA</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>xB</identifier>
	<symbol>=</symbol>
	<identifier>xB</identifier>
	<symbol>-</symbol>
	<identifier>rem_xB</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>rem_xB</identifier>
	<symbol>=</symbol>
	<integerConstant>16</integerConstant>
	<symbol>-</symbol>
	<identifier>rem_xB</identifier>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>xB</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>address</identifier>
	<symbol>=</symbol>
	<integerConstant>32</integerConstant>
	<symbol>*</symbol>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>+</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>)</symbol>
	<symbol>/</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>color</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>|</symbol>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<identifier>rem_xA</identifier>
	<symbol>]</symbol>
	<symbol>&amp;</symbol>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<identifier>rem_xB</identifier>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<identifier>rem_xA</identifier>
	<symbol>]</symbol>
	<symbol>|</symbol>
	<symbol>~</symbol>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<identifier>rem_xB</identifier>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>address</identifier>
	<symbol>=</symbol>
	<integerConstant>32</integerConstant>
	<symbol>*</symbol>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>+</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>)</symbol>
	<symbol>/</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>color</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>|</symbol>
	<symbol>~</symbol>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<identifier>rem_xA</identifier>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<identifier>rem_xA</identifier>
	<symbol>]</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>xA</identifier>
	<symbol>+</symbol>
	<integerConstant>16</integerConstant>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>&lt;</symbol>
	<identifier>xB</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>color</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<integerConstant>32</integerConstant>
	<symbol>*</symbol>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>+</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>)</symbol>
	<symbol>/</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<integerConstant>32</integerConstant>
	<symbol>*</symbol>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>+</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>)</symbol>
	<symbol>/</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>xA</identifier>
	<symbol>=</symbol>
	<identifier>xA</identifier>
	<symbol>+</symbol>
	<integerConstant>16</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>address</identifier>
	<symbol>=</symbol>
	<integerConstant>32</integerConstant>
	<symbol>*</symbol>
	<symbol>(</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>+</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>xB</identifier>
	<symbol>)</symbol>
	<symbol>/</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>color</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>|</symbol>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<identifier>rem_xB</identifier>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>screen</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<identifier>fill</identifier>
	<symbol>[</symbol>
	<identifier>rem_xB</identifier>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>&lt;</symbol>
	<identifier>xB</identifier>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>yA</identifier>
	<symbol>&lt;</symbol>
	<identifier>yB</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>dx</identifier>
	<symbol>=</symbol>
	<identifier>xB</identifier>
	<symbol>-</symbol>
	<identifier>xA</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>dy</identifier>
	<symbol>=</symbol>
	<identifier>yB</identifier>
	<symbol>-</symbol>
	<identifier>yA</identifier>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>a</identifier>
	<symbol>&gt;</symbol>
	<identifier>dx</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>b</identifier>
	<symbol>&gt;</symbol>
	<identifier>dy</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Screen</identifier>
	<symbol>.</symbol>
	<identifier>drawPixel</identifier>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>+</symbol>
	<identifier>a</identifier>
	<symbol>,</symbol>
	<identifier>yA</identifier>
	<symbol>+</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>adyMinusbdx</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>a</identifier>
	<symbol>=</symbol>
	<identifier>a</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>adyMinusbdx</identifier>
	<symbol>=</symbol>
	<identifier>adyMinusbdx</identifier>
	<symbol>+</symbol>
	<identifier>dy</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>b</identifier>
	<symbol>=</symbol>
	<identifier>b</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>adyMinusbdx</identifier>
	<symbol>=</symbol>
	<identifier>adyMinusbdx</identifier>
	<symbol>-</symbol>
	<identifier>dx</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>dx</identifier>
	<symbol>=</symbol>
	<identifier>xB</identifier>
	<symbol>-</symbol>
	<identifier>xA</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>dy</identifier>
	<symbol>=</symbol>
	<identifier>yA</identifier>
	<symbol>-</symbol>
	<identifier>yB</identifier>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>a</identifier>
	<symbol>&gt;</symbol>
	<identifier>dx</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>b</identifier>
	<symbol>&gt;</symbol>
	<identifier>dy</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Screen</identifier>
	<symbol>.</symbol>
	<identifier>drawPixel</identifier>
	<symbol>(</symbol>
	<identifier>xA</identifier>
	<symbol>+</symbol>
	<identifier>a</identifier>
	<symbol>,</symbol>
	<identifier>yA</identifier>
	<symbol>-</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>adyMinusbdx</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>a</identifier>
	<symbol>=</symbol>
	<identifier>a</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>adyMinusbdx</identifier>
	<symbol>=</symbol>
	<identifier>adyMinusbdx</identifier>
	<symbol>+</symbol>
	<identifier>dy</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>b</identifier>
	<symbol>=</symbol>
	<identifier>b</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>adyMinusbdx</identifier>
	<symbol>=</symbol>
	<identifier>adyMinusbdx</identifier>
	<symbol>-</symbol>
	<identifier>dx</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>drawRectangle</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>x1</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>y1</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>x2</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>y2</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>b</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>b</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>b</identifier>
	<symbol>&gt;</symbol>
	<symbol>(</symbol>
	<identifier>y2</identifier>
	<symbol>-</symbol>
	<identifier>y1</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Screen</identifier>
	<symbol>.</symbol>
	<identifier>drawLine</identifier>
	<symbol>(</symbol>
	<identifier>x1</identifier>
	<symbol>,</symbol>
	<identifier>y1</identifier>
	<symbol>+</symbol>
	<identifier>b</identifier>
	<symbol>,</symbol>
	<identifier>x2</identifier>
	<symbol>,</symbol>
	<identifier>y1</identifier>
	<symbol>+</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>b</identifier>
	<symbol>=</symbol>
	<identifier>b</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>drawCircle</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>x</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>y</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>r</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>dy</identifier>
	<symbol>,</symbol>
	<identifier>sqrt</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>dy</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>sqrt</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>r</identifier>
	<symbol>&gt;</symbol>
	<integerConstant>181</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>r</identifier>
	<symbol>=</symbol>
	<integerConstant>181</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<identifier>dy</identifier>
	<symbol>&lt;</symbol>
	<symbol>(</symbol>
	<identifier>r</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>sqrt</identifier>
	<symbol>=</symbol>
	<identifier>Math</identifier>
	<symbol>.</symbol>
	<identifier>sqrt</identifier>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>r</identifier>
	<symbol>*</symbol>
	<identifier>r</identifier>
	<symbol>)</symbol>
	<symbol>-</symbol>
	<symbol>(</symbol>
	<identifier>dy</identifier>
	<symbol>*</symbol>
	<identifier>dy</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>dy</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Screen</identifier>
	<symbol>.</symbol>
	<identifier>drawLine</identifier>
	<symbol>(</symbol>
	<identifier>x</identifier>
	<symbol>-</symbol>
	<identifier>sqrt</identifier>
	<symbol>,</symbol>
	<identifier>y</identifier>
	<symbol>+</symbol>
	<identifier>dy</identifier>
	<symbol>,</symbol>
	<identifier>x</identifier>
	<symbol>+</symbol>
	<identifier>sqrt</identifier>
	<symbol>,</symbol>
	<identifier>y</identifier>
	<symbol>+</symbol>
	<identifier>dy</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Screen</identifier>
	<symbol>.</symbol>
	<identifier>drawLine</identifier>
	<symbol>(</symbol>
	<identifier>x</identifier>
	<symbol>-</symbol>
	<identifier>sqrt</identifier>
	<symbol>,</symbol>
	<identifier>y</identifier>
	<symbol>+</symbol>
	<identifier>dy</identifier>
	<symbol>,</symbol>
	<identifier>x</identifier>
	<symbol>+</symbol>
	<identifier>sqrt</identifier>
	<symbol>,</symbol>
	<identifier>y</identifier>
	<symbol>+</symbol>
	<identifier>dy</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>Screen</identifier>
	<symbol>.</symbol>
	<identifier>drawLine</identifier>
	<symbol>(</symbol>
	<identifier>x</identifier>
	<symbol>-</symbol>
	<identifier>sqrt</identifier>
	<symbol>,</symbol>
	<identifier>y</identifier>
	<symbol>-</symbol>
	<identifier>dy</identifier>
	<symbol>,</symbol>
	<identifier>x</identifier>
	<symbol>+</symbol>
	<identifier>sqrt</identifier>
	<symbol>,</symbol>
	<identifier>y</identifier>
	<symbol>-</symbol>
	<identifier>dy</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>dy</identifier>
	<symbol>=</symbol>
	<identifier>dy</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
</tokens>