<tokens>
	<keyword>class</keyword>
	<identifier>Memory</identifier>
	<symbol>{</symbol>
	<keyword>static</keyword>
	<identifier>Array</identifier>
	<identifier>freelist</identifier>
	<symbol>;</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>init</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<identifier>Array</identifier>
	<identifier>block</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>block</identifier>
	<symbol>=</symbol>
	<integerConstant>2048</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>block</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<keyword>null</keyword>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>block</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>14334</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>freelist</identifier>
	<symbol>=</symbol>
	<identifier>block</identifier>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>int</keyword>
	<identifier>peek</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>address</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<identifier>Array</identifier>
	<identifier>ram</identifier>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<identifier>ram</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>poke</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>address</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>value</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<identifier>Array</identifier>
	<identifier>ram</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>ram</identifier>
	<symbol>[</symbol>
	<identifier>address</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>value</identifier>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>int</keyword>
	<identifier>alloc</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>size</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<identifier>Array</identifier>
	<identifier>current</identifier>
	<symbol>,</symbol>
	<identifier>next</identifier>
	<symbol>,</symbol>
	<identifier>block</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>=</symbol>
	<identifier>freelist</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>next</identifier>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>current</identifier>
	<symbol>=</symbol>
	<keyword>null</keyword>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>&lt;</symbol>
	<symbol>(</symbol>
	<identifier>size</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>next</identifier>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>-</symbol>
	<symbol>(</symbol>
	<identifier>size</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>block</identifier>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>+</symbol>
	<integerConstant>2</integerConstant>
	<symbol>+</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>block</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>size</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<identifier>block</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>deAlloc</identifier>
	<symbol>(</symbol>
	<identifier>Array</identifier>
	<identifier>o</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<identifier>Array</identifier>
	<identifier>current</identifier>
	<symbol>,</symbol>
	<identifier>next</identifier>
	<symbol>,</symbol>
	<identifier>new_block</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>size</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>=</symbol>
	<identifier>freelist</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>new_block</identifier>
	<symbol>=</symbol>
	<identifier>o</identifier>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>size</identifier>
	<symbol>=</symbol>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<keyword>null</keyword>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>size</identifier>
	<symbol>-</symbol>
	<integerConstant>2</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>next</identifier>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>next</identifier>
	<symbol>=</symbol>
	<keyword>null</keyword>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>new_block</identifier>
	<symbol>&gt;</symbol>
	<identifier>current</identifier>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>new_block</identifier>
	<symbol>&lt;</symbol>
	<identifier>next</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>new_block</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>next</identifier>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>new_block</identifier>
	<symbol>+</symbol>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>+</symbol>
	<integerConstant>2</integerConstant>
	<symbol>)</symbol>
	<symbol>=</symbol>
	<identifier>next</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>next</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>+</symbol>
	<identifier>next</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>+</symbol>
	<integerConstant>2</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>current</identifier>
	<symbol>+</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>+</symbol>
	<integerConstant>2</integerConstant>
	<symbol>)</symbol>
	<symbol>=</symbol>
	<identifier>new_block</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>+</symbol>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>+</symbol>
	<integerConstant>2</integerConstant>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>next</identifier>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>current</identifier>
	<symbol>+</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>+</symbol>
	<integerConstant>2</integerConstant>
	<symbol>)</symbol>
	<symbol>=</symbol>
	<identifier>new_block</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>+</symbol>
	<identifier>new_block</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>+</symbol>
	<integerConstant>2</integerConstant>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>current</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>new_block</identifier>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
</tokens>