// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array freelist;
		
    /** Initializes the class. */
    function void init() {
	
	var Array block;	

	let block = 2048; // heap starting address
	
	let block[0] = null;
	let block[1] = 14334; //heap size (16383 - 2048 + 1 - 2) extra 2 mem location reserved for info of the segment

	let freelist = block;
		
	return;
	
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	
	var Array ram;	

	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {

	var Array ram;	
	let ram[address] = value;
	return;
	
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

	var Array current,next,block;

	let current = freelist;
	let next = current[0];
	
	while(~(current=null)){
	
	if(current[1] < (size+1)) {

	let current = current[0];
	let next = current[0];

	}

	else {
	
	let current[1] = current[1] - (size + 1); 

	let block = current + 2 + current[1];
			
	let block[0] = size+1;
			
	return block + 1;

	}	

	}

	return -1;	
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
 
   function void deAlloc(Array o) {
	
	var Array current,next,new_block;
	var int size;

	let current = freelist;
	
	let new_block = o-1;
	let size = new_block[0];	

	let new_block[0] = null;
	let new_block[1] = size - 2;

	let next = current[0];

	// Defragmentation by storing the de-allocated as per ascending address space and combining continguous blocks
						
	while (~(next=null)) {

	if((new_block > current) & (new_block < next)){ 
	
		let current[0] = new_block;
		let new_block[0] = next;

		if((new_block+new_block[1] + 2)=next){

			let new_block[0] = next[0]; 
			let new_block[1] = new_block[1] + next[1] + 2;
		
			}

		if((current + current[1] + 2)=new_block){
		
			let current[0] = new_block[0];
			let current[1] = current[1] + new_block[1] + 2;
			return;
		
		}
		
		return;
				
		}
	
	
	else{
		let current = current[0];
		let next = current[0];	
		
		}
	}
	
	if((current + current[1] + 2)=new_block){

		let current[0] = 0;
		let current[1] = current[1] + new_block[1] + 2;
	
		return;	
	
		}	

	let current[0] = new_block;
	
	return;
    }    
}
