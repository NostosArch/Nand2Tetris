// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length,maxlength;
    field Array string; 

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {	

	let length = 0;

	if(maxLength < 1) { 

		let maxlength = 1;
		let string = Array.new(1);
	}	

	else {

		let maxlength = maxLength;

		let string = Array.new(maxLength);

	}

	return this;

    }

    /** Disposes this string. */
    method void dispose() {
    	
	do string.dispose();
	
	do Memory.deAlloc(this);

	return;

    }

    /** Returns the current length of this string. */
    method int length() {
	
	return length;

    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	
	if(~(j<length)) { return 0; }
	
	if(j<0) { return 0; } 

	return string[j];

    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	
	if(~(j<length)) { return; }
	
	let string[j] = c;

	return;
    }


    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {

	if(~(length < maxlength)) { return this; }	
	
	let string[length] = c;
	
	let length = length + 1;
	
	return this;	

    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	
	if(length = 0) { return; }	
	let length = length - 1;

	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {

	var int v,i,d;

	let v = 0;
	let i = 0;
	
	if(string[0] = 45){

	let i = 1;

	}		

	while(i<length){

		if(~((string[i] > 47) & (string[i] < 58))){

			return v;	

		}

	let d = string[i] - 48;

	let v = v*10 + d;

	let i = i + 1;

	}
	
	if(string[0] = 45){

	return -v;

	}	

	return v;

    }
   
    method void convert2int(int val){

	var int lastdigit,n;

	let n = val;
	
	if(n<0){
			
		do appendChar(45);
		
		let n = -n;

	}
	
	let lastdigit = n - (10*(n/10));

	if(n<10){		

		do appendChar(lastdigit+48);
	
	}	
	
	else {
		
		do convert2int(n/10);
		
		do appendChar(lastdigit+48);
	}

	return;

    }
	


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	
	let length = 0;

	do convert2int(val);
	
	return;
	
    }

    /** Returns the new line character. */
    function char newLine() {
	
	return 128; 
	
    }

    /** Returns the backspace character. */
    function char backSpace() {		
	
	return 129;

    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;	
    }
}
