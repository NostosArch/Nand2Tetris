<tokens>
	<keyword>class</keyword>
	<identifier>String</identifier>
	<symbol>{</symbol>
	<keyword>field</keyword>
	<keyword>int</keyword>
	<identifier>length</identifier>
	<symbol>,</symbol>
	<identifier>maxlength</identifier>
	<symbol>;</symbol>
	<keyword>field</keyword>
	<identifier>Array</identifier>
	<identifier>string</identifier>
	<symbol>;</symbol>
	<keyword>constructor</keyword>
	<identifier>String</identifier>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>maxLength</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>length</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>maxLength</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>maxlength</identifier>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>string</identifier>
	<symbol>=</symbol>
	<identifier>Array</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>maxlength</identifier>
	<symbol>=</symbol>
	<identifier>maxLength</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>string</identifier>
	<symbol>=</symbol>
	<identifier>Array</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<identifier>maxLength</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<keyword>this</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>void</keyword>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>string</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>Memory</identifier>
	<symbol>.</symbol>
	<identifier>deAlloc</identifier>
	<symbol>(</symbol>
	<keyword>this</keyword>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>int</keyword>
	<identifier>length</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<identifier>length</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>char</keyword>
	<identifier>charAt</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>j</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>j</identifier>
	<symbol>&lt;</symbol>
	<identifier>length</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>j</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<identifier>string</identifier>
	<symbol>[</symbol>
	<identifier>j</identifier>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>void</keyword>
	<identifier>setCharAt</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>j</identifier>
	<symbol>,</symbol>
	<keyword>char</keyword>
	<identifier>c</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>j</identifier>
	<symbol>&lt;</symbol>
	<identifier>length</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>string</identifier>
	<symbol>[</symbol>
	<identifier>j</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>c</identifier>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<identifier>String</identifier>
	<identifier>appendChar</identifier>
	<symbol>(</symbol>
	<keyword>char</keyword>
	<identifier>c</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>length</identifier>
	<symbol>&lt;</symbol>
	<identifier>maxlength</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<keyword>this</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>string</identifier>
	<symbol>[</symbol>
	<identifier>length</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<identifier>c</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>length</identifier>
	<symbol>=</symbol>
	<identifier>length</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<keyword>this</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>void</keyword>
	<identifier>eraseLastChar</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>length</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>length</identifier>
	<symbol>=</symbol>
	<identifier>length</identifier>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>int</keyword>
	<identifier>intValue</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>v</identifier>
	<symbol>,</symbol>
	<identifier>i</identifier>
	<symbol>,</symbol>
	<identifier>d</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>v</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>i</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>string</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>45</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>i</identifier>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<identifier>i</identifier>
	<symbol>&lt;</symbol>
	<identifier>length</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>string</identifier>
	<symbol>[</symbol>
	<identifier>i</identifier>
	<symbol>]</symbol>
	<symbol>&gt;</symbol>
	<integerConstant>47</integerConstant>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>string</identifier>
	<symbol>[</symbol>
	<identifier>i</identifier>
	<symbol>]</symbol>
	<symbol>&lt;</symbol>
	<integerConstant>58</integerConstant>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<identifier>v</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>d</identifier>
	<symbol>=</symbol>
	<identifier>string</identifier>
	<symbol>[</symbol>
	<identifier>i</identifier>
	<symbol>]</symbol>
	<symbol>-</symbol>
	<integerConstant>48</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>v</identifier>
	<symbol>=</symbol>
	<identifier>v</identifier>
	<symbol>*</symbol>
	<integerConstant>10</integerConstant>
	<symbol>+</symbol>
	<identifier>d</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>i</identifier>
	<symbol>=</symbol>
	<identifier>i</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>string</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>45</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<symbol>-</symbol>
	<identifier>v</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<identifier>v</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>void</keyword>
	<identifier>convert2int</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>val</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>lastdigit</identifier>
	<symbol>,</symbol>
	<identifier>n</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>n</identifier>
	<symbol>=</symbol>
	<identifier>val</identifier>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>n</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>appendChar</identifier>
	<symbol>(</symbol>
	<integerConstant>45</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>n</identifier>
	<symbol>=</symbol>
	<symbol>-</symbol>
	<identifier>n</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>lastdigit</identifier>
	<symbol>=</symbol>
	<identifier>n</identifier>
	<symbol>-</symbol>
	<symbol>(</symbol>
	<integerConstant>10</integerConstant>
	<symbol>*</symbol>
	<symbol>(</symbol>
	<identifier>n</identifier>
	<symbol>/</symbol>
	<integerConstant>10</integerConstant>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>n</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>10</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>appendChar</identifier>
	<symbol>(</symbol>
	<identifier>lastdigit</identifier>
	<symbol>+</symbol>
	<integerConstant>48</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>convert2int</identifier>
	<symbol>(</symbol>
	<identifier>n</identifier>
	<symbol>/</symbol>
	<integerConstant>10</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>appendChar</identifier>
	<symbol>(</symbol>
	<identifier>lastdigit</identifier>
	<symbol>+</symbol>
	<integerConstant>48</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>void</keyword>
	<identifier>setInt</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>val</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>length</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>convert2int</identifier>
	<symbol>(</symbol>
	<identifier>val</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>char</keyword>
	<identifier>newLine</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<integerConstant>128</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>char</keyword>
	<identifier>backSpace</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<integerConstant>129</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>char</keyword>
	<identifier>doubleQuote</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<integerConstant>34</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
</tokens>