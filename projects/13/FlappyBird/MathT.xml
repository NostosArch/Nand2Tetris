<tokens>
	<keyword>class</keyword>
	<identifier>Math</identifier>
	<symbol>{</symbol>
	<keyword>static</keyword>
	<identifier>Array</identifier>
	<identifier>power_set</identifier>
	<symbol>;</symbol>
	<keyword>function</keyword>
	<keyword>void</keyword>
	<identifier>init</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>power_set</identifier>
	<symbol>=</symbol>
	<identifier>Array</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>8</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<integerConstant>0</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<integerConstant>1</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>2</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<integerConstant>2</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>4</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<integerConstant>3</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>8</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<integerConstant>4</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>16</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<integerConstant>5</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>32</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<integerConstant>6</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>64</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<integerConstant>7</integerConstant>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>128</integerConstant>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>int</keyword>
	<identifier>abs</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>x</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>x</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<symbol>-</symbol>
	<identifier>x</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<identifier>x</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>int</keyword>
	<identifier>multiply</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>x</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>y</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<identifier>Array</identifier>
	<identifier>a</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>mask</identifier>
	<symbol>,</symbol>
	<identifier>position</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>sum</identifier>
	<symbol>,</symbol>
	<identifier>shiftedX</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>a</identifier>
	<symbol>=</symbol>
	<identifier>Array</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>position</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<identifier>position</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>position</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>mask</identifier>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>mask</identifier>
	<symbol>=</symbol>
	<identifier>mask</identifier>
	<symbol>+</symbol>
	<identifier>mask</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>y</identifier>
	<symbol>&amp;</symbol>
	<identifier>mask</identifier>
	<symbol>)</symbol>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>a</identifier>
	<symbol>[</symbol>
	<identifier>position</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>a</identifier>
	<symbol>[</symbol>
	<identifier>position</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>position</identifier>
	<symbol>=</symbol>
	<identifier>position</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>position</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>shiftedX</identifier>
	<symbol>=</symbol>
	<identifier>x</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>sum</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<identifier>position</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>16</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>a</identifier>
	<symbol>[</symbol>
	<identifier>position</identifier>
	<symbol>]</symbol>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>sum</identifier>
	<symbol>=</symbol>
	<identifier>sum</identifier>
	<symbol>+</symbol>
	<identifier>shiftedX</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>shiftedX</identifier>
	<symbol>=</symbol>
	<identifier>shiftedX</identifier>
	<symbol>+</symbol>
	<identifier>shiftedX</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>position</identifier>
	<symbol>=</symbol>
	<identifier>position</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>do</keyword>
	<identifier>a</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<identifier>sum</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>int</keyword>
	<identifier>divide</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>x</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>y</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>q</identifier>
	<symbol>,</symbol>
	<identifier>neg</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>a</identifier>
	<symbol>,</symbol>
	<identifier>b</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>q</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>neg</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>x</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>a</identifier>
	<symbol>=</symbol>
	<symbol>-</symbol>
	<identifier>x</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>a</identifier>
	<symbol>=</symbol>
	<identifier>x</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>y</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>b</identifier>
	<symbol>=</symbol>
	<symbol>-</symbol>
	<identifier>y</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>b</identifier>
	<symbol>=</symbol>
	<identifier>y</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>y</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>x</identifier>
	<symbol>&gt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>|</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>y</identifier>
	<symbol>&gt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>x</identifier>
	<symbol>&lt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>neg</identifier>
	<symbol>=</symbol>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>b</identifier>
	<symbol>&gt;</symbol>
	<identifier>a</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>q</identifier>
	<symbol>=</symbol>
	<identifier>a</identifier>
	<symbol>/</symbol>
	<symbol>(</symbol>
	<identifier>b</identifier>
	<symbol>+</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>a</identifier>
	<symbol>-</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>q</identifier>
	<symbol>+</symbol>
	<identifier>q</identifier>
	<symbol>)</symbol>
	<symbol>*</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>&lt;</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>neg</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<symbol>(</symbol>
	<identifier>q</identifier>
	<symbol>+</symbol>
	<identifier>q</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<symbol>-</symbol>
	<symbol>(</symbol>
	<identifier>q</identifier>
	<symbol>+</symbol>
	<identifier>q</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>neg</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<symbol>(</symbol>
	<identifier>q</identifier>
	<symbol>+</symbol>
	<identifier>q</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<symbol>-</symbol>
	<symbol>(</symbol>
	<identifier>q</identifier>
	<symbol>+</symbol>
	<identifier>q</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>int</keyword>
	<identifier>sqrt</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>x</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>y</identifier>
	<symbol>,</symbol>
	<identifier>j</identifier>
	<symbol>,</symbol>
	<identifier>power_2</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>y</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>j</identifier>
	<symbol>=</symbol>
	<integerConstant>7</integerConstant>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<identifier>j</identifier>
	<symbol>&gt;</symbol>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>power_2</identifier>
	<symbol>=</symbol>
	<symbol>(</symbol>
	<identifier>y</identifier>
	<symbol>+</symbol>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<identifier>j</identifier>
	<symbol>]</symbol>
	<symbol>)</symbol>
	<symbol>*</symbol>
	<symbol>(</symbol>
	<identifier>y</identifier>
	<symbol>+</symbol>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<identifier>j</identifier>
	<symbol>]</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>power_2</identifier>
	<symbol>&gt;</symbol>
	<identifier>x</identifier>
	<symbol>)</symbol>
	<symbol>&amp;</symbol>
	<symbol>(</symbol>
	<identifier>power_2</identifier>
	<symbol>&gt;</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>y</identifier>
	<symbol>=</symbol>
	<identifier>y</identifier>
	<symbol>+</symbol>
	<identifier>power_set</identifier>
	<symbol>[</symbol>
	<identifier>j</identifier>
	<symbol>]</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>j</identifier>
	<symbol>=</symbol>
	<identifier>j</identifier>
	<symbol>-</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<identifier>y</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>int</keyword>
	<identifier>max</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>a</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>a</identifier>
	<symbol>&gt;</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<identifier>a</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<identifier>b</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>function</keyword>
	<keyword>int</keyword>
	<identifier>min</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>a</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>a</identifier>
	<symbol>&lt;</symbol>
	<identifier>b</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<identifier>a</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<identifier>b</identifier>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
</tokens>