<tokens>
	<keyword>class</keyword>
	<identifier>BirdGame</identifier>
	<symbol>{</symbol>
	<keyword>field</keyword>
	<identifier>Bird</identifier>
	<identifier>bird</identifier>
	<symbol>;</symbol>
	<keyword>field</keyword>
	<keyword>int</keyword>
	<identifier>direction</identifier>
	<symbol>;</symbol>
	<keyword>field</keyword>
	<identifier>Bar</identifier>
	<identifier>bar</identifier>
	<symbol>;</symbol>
	<keyword>constructor</keyword>
	<identifier>BirdGame</identifier>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>bird</identifier>
	<symbol>=</symbol>
	<identifier>Bird</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>15</integerConstant>
	<symbol>,</symbol>
	<integerConstant>7</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bar</identifier>
	<symbol>=</symbol>
	<identifier>Bar</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>80</integerConstant>
	<symbol>,</symbol>
	<integerConstant>50</integerConstant>
	<symbol>,</symbol>
	<integerConstant>150</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<keyword>this</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>void</keyword>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>bird</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>Memory</identifier>
	<symbol>.</symbol>
	<identifier>deAlloc</identifier>
	<symbol>(</symbol>
	<keyword>this</keyword>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>int</keyword>
	<identifier>checkCollide</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>bird_y</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>bar_x</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>bar_width</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>bar_opening_width</identifier>
	<symbol>,</symbol>
	<keyword>int</keyword>
	<identifier>bar_opening_height</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>bird_top_x</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>bird_top_y</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>bird_bottom_x</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>bird_bottom_y</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>first_rect_top_x</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>first_rect_top_y</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>first_rect_bottom_x</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>first_rect_bottom_y</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>second_rect_top_x</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>second_rect_top_y</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>second_rect_bottom_x</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>second_rect_bottom_y</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>collision_condition_1</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>collision_condition_2</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bird_top_x</identifier>
	<symbol>=</symbol>
	<integerConstant>240</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bird_top_y</identifier>
	<symbol>=</symbol>
	<identifier>bird_y</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bird_bottom_x</identifier>
	<symbol>=</symbol>
	<integerConstant>256</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bird_bottom_y</identifier>
	<symbol>=</symbol>
	<identifier>bird_y</identifier>
	<symbol>+</symbol>
	<integerConstant>16</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>first_rect_top_x</identifier>
	<symbol>=</symbol>
	<identifier>bar_x</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>first_rect_top_y</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>first_rect_bottom_x</identifier>
	<symbol>=</symbol>
	<identifier>bar_x</identifier>
	<symbol>+</symbol>
	<identifier>bar_width</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>first_rect_bottom_y</identifier>
	<symbol>=</symbol>
	<identifier>bar_opening_height</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>second_rect_top_x</identifier>
	<symbol>=</symbol>
	<identifier>bar_x</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>second_rect_top_y</identifier>
	<symbol>=</symbol>
	<identifier>bar_opening_height</identifier>
	<symbol>+</symbol>
	<identifier>bar_opening_width</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>second_rect_bottom_x</identifier>
	<symbol>=</symbol>
	<identifier>bar_x</identifier>
	<symbol>+</symbol>
	<identifier>bar_width</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>second_rect_bottom_y</identifier>
	<symbol>=</symbol>
	<integerConstant>255</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>collision_condition_1</identifier>
	<symbol>=</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>bird_bottom_x</identifier>
	<symbol>&lt;</symbol>
	<identifier>first_rect_top_x</identifier>
	<symbol>)</symbol>
	<symbol>|</symbol>
	<symbol>(</symbol>
	<identifier>bird_top_x</identifier>
	<symbol>&gt;</symbol>
	<identifier>first_rect_bottom_x</identifier>
	<symbol>)</symbol>
	<symbol>|</symbol>
	<symbol>(</symbol>
	<identifier>bird_bottom_y</identifier>
	<symbol>&lt;</symbol>
	<identifier>first_rect_top_y</identifier>
	<symbol>)</symbol>
	<symbol>|</symbol>
	<symbol>(</symbol>
	<identifier>bird_top_y</identifier>
	<symbol>&gt;</symbol>
	<identifier>first_rect_bottom_y</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>collision_condition_2</identifier>
	<symbol>=</symbol>
	<symbol>(</symbol>
	<symbol>(</symbol>
	<identifier>bird_bottom_x</identifier>
	<symbol>&lt;</symbol>
	<identifier>second_rect_top_x</identifier>
	<symbol>)</symbol>
	<symbol>|</symbol>
	<symbol>(</symbol>
	<identifier>bird_top_x</identifier>
	<symbol>&gt;</symbol>
	<identifier>second_rect_bottom_x</identifier>
	<symbol>)</symbol>
	<symbol>|</symbol>
	<symbol>(</symbol>
	<identifier>bird_bottom_y</identifier>
	<symbol>&lt;</symbol>
	<identifier>second_rect_top_y</identifier>
	<symbol>)</symbol>
	<symbol>|</symbol>
	<symbol>(</symbol>
	<identifier>bird_top_y</identifier>
	<symbol>&gt;</symbol>
	<identifier>second_rect_bottom_y</identifier>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>collision_condition_1</identifier>
	<symbol>&amp;</symbol>
	<identifier>collision_condition_2</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>return</keyword>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>void</keyword>
	<identifier>printScore</identifier>
	<symbol>(</symbol>
	<keyword>int</keyword>
	<identifier>score</identifier>
	<symbol>,</symbol>
	<identifier>String</identifier>
	<identifier>s</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Output</identifier>
	<symbol>.</symbol>
	<identifier>printString</identifier>
	<symbol>(</symbol>
	<identifier>s</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>Output</identifier>
	<symbol>.</symbol>
	<identifier>printInt</identifier>
	<symbol>(</symbol>
	<identifier>score</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>Output</identifier>
	<symbol>.</symbol>
	<identifier>moveCursor</identifier>
	<symbol>(</symbol>
	<integerConstant>1</integerConstant>
	<symbol>,</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>s</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>method</keyword>
	<keyword>void</keyword>
	<identifier>run</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>var</keyword>
	<keyword>boolean</keyword>
	<identifier>exit</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>key</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>status</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>collision</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>wall_width</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>wall_opening_width</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>wall_opening_height</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>bird_y</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>wall_x</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>barkind</identifier>
	<symbol>;</symbol>
	<keyword>var</keyword>
	<keyword>int</keyword>
	<identifier>score</identifier>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>collision</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>exit</identifier>
	<symbol>=</symbol>
	<keyword>false</keyword>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>barkind</identifier>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>score</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>Output</identifier>
	<symbol>.</symbol>
	<identifier>moveCursor</identifier>
	<symbol>(</symbol>
	<integerConstant>1</integerConstant>
	<symbol>,</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>while</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<identifier>exit</identifier>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>key</identifier>
	<symbol>=</symbol>
	<identifier>Keyboard</identifier>
	<symbol>.</symbol>
	<identifier>keyPressed</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>key</identifier>
	<symbol>=</symbol>
	<integerConstant>81</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>exit</identifier>
	<symbol>=</symbol>
	<keyword>true</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>collision</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<symbol>~</symbol>
	<symbol>(</symbol>
	<identifier>key</identifier>
	<symbol>=</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>bird</identifier>
	<symbol>.</symbol>
	<identifier>moveUp</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>bird</identifier>
	<symbol>.</symbol>
	<identifier>gravity</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>status</identifier>
	<symbol>=</symbol>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>scroll</identifier>
	<symbol>(</symbol>
	<integerConstant>3</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>status</identifier>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>let</keyword>
	<identifier>score</identifier>
	<symbol>=</symbol>
	<identifier>score</identifier>
	<symbol>+</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>barkind</identifier>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>erase</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bar</identifier>
	<symbol>=</symbol>
	<identifier>Bar</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>80</integerConstant>
	<symbol>,</symbol>
	<integerConstant>60</integerConstant>
	<symbol>,</symbol>
	<integerConstant>150</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>barkind</identifier>
	<symbol>=</symbol>
	<integerConstant>2</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>barkind</identifier>
	<symbol>=</symbol>
	<integerConstant>2</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>erase</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bar</identifier>
	<symbol>=</symbol>
	<identifier>Bar</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>80</integerConstant>
	<symbol>,</symbol>
	<integerConstant>60</integerConstant>
	<symbol>,</symbol>
	<integerConstant>150</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>barkind</identifier>
	<symbol>=</symbol>
	<integerConstant>3</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>barkind</identifier>
	<symbol>=</symbol>
	<integerConstant>3</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>erase</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bar</identifier>
	<symbol>=</symbol>
	<identifier>Bar</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>80</integerConstant>
	<symbol>,</symbol>
	<integerConstant>20</integerConstant>
	<symbol>,</symbol>
	<integerConstant>150</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>barkind</identifier>
	<symbol>=</symbol>
	<integerConstant>4</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>else</keyword>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>erase</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>dispose</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bar</identifier>
	<symbol>=</symbol>
	<identifier>Bar</identifier>
	<symbol>.</symbol>
	<identifier>new</identifier>
	<symbol>(</symbol>
	<integerConstant>80</integerConstant>
	<symbol>,</symbol>
	<integerConstant>100</integerConstant>
	<symbol>,</symbol>
	<integerConstant>150</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>barkind</identifier>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>do</keyword>
	<identifier>printScore</identifier>
	<symbol>(</symbol>
	<identifier>score</identifier>
	<symbol>,</symbol>
	<stringConstant> Score : </stringConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>let</keyword>
	<identifier>wall_width</identifier>
	<symbol>=</symbol>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>BarWidth</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>wall_x</identifier>
	<symbol>=</symbol>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>BarX</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>wall_opening_width</identifier>
	<symbol>=</symbol>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>BarOpeningWidth</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>wall_opening_height</identifier>
	<symbol>=</symbol>
	<identifier>bar</identifier>
	<symbol>.</symbol>
	<identifier>BarOpeningHeight</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>bird_y</identifier>
	<symbol>=</symbol>
	<identifier>bird</identifier>
	<symbol>.</symbol>
	<identifier>ypos</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>collision</identifier>
	<symbol>=</symbol>
	<identifier>checkCollide</identifier>
	<symbol>(</symbol>
	<identifier>bird_y</identifier>
	<symbol>,</symbol>
	<identifier>wall_x</identifier>
	<symbol>,</symbol>
	<identifier>wall_width</identifier>
	<symbol>,</symbol>
	<identifier>wall_opening_width</identifier>
	<symbol>,</symbol>
	<identifier>wall_opening_height</identifier>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<keyword>if</keyword>
	<symbol>(</symbol>
	<identifier>collision</identifier>
	<symbol>=</symbol>
	<integerConstant>1</integerConstant>
	<symbol>)</symbol>
	<symbol>{</symbol>
	<keyword>do</keyword>
	<identifier>Output</identifier>
	<symbol>.</symbol>
	<identifier>moveCursor</identifier>
	<symbol>(</symbol>
	<integerConstant>0</integerConstant>
	<symbol>,</symbol>
	<integerConstant>0</integerConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>Output</identifier>
	<symbol>.</symbol>
	<identifier>printString</identifier>
	<symbol>(</symbol>
	<stringConstant>Game Over</stringConstant>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>do</keyword>
	<identifier>Output</identifier>
	<symbol>.</symbol>
	<identifier>println</identifier>
	<symbol>(</symbol>
	<symbol>)</symbol>
	<symbol>;</symbol>
	<keyword>let</keyword>
	<identifier>exit</identifier>
	<symbol>=</symbol>
	<keyword>true</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
	<keyword>return</keyword>
	<symbol>;</symbol>
	<symbol>}</symbol>
	<symbol>}</symbol>
</tokens>