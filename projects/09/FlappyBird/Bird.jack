class Bird {

field int location, memAddress, x, y;
constructor Bird new(int Ax, int Ay) {
	let x = Ax;
	let y = Ay;
	do draw();
	return this;
}


method void draw() {
	let location = 512*y + x;
	let memAddress = 16384+location;
	do Memory.poke(memAddress+0, 8184);
	do Memory.poke(memAddress+32, 12300);
	do Memory.poke(memAddress+64, 24582);
	do Memory.poke(memAddress+96, -13309);
	do Memory.poke(memAddress+128, -28159);
	do Memory.poke(memAddress+160, -29695);
	do Memory.poke(memAddress+192, -32761);
	do Memory.poke(memAddress+224, -32247);
	do Memory.poke(memAddress+256, -31223);
	do Memory.poke(memAddress+288, -30199);
	do Memory.poke(memAddress+320, -3577);
	do Memory.poke(memAddress+352, -31743);
	do Memory.poke(memAddress+384, -14333);
	do Memory.poke(memAddress+416, 12294);
	do Memory.poke(memAddress+448, 4108);
	do Memory.poke(memAddress+480, 8184);
	return;
}

method void erase() {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128,0);
        do Memory.poke(memAddress+160,0);
        do Memory.poke(memAddress+192,0);
        do Memory.poke(memAddress+224,0);
        do Memory.poke(memAddress+256,0);
        do Memory.poke(memAddress+288,0);
        do Memory.poke(memAddress+320,0);
        do Memory.poke(memAddress+352,0);
        do Memory.poke(memAddress+384,0);
        do Memory.poke(memAddress+416,0);
        do Memory.poke(memAddress+448,0);
        do Memory.poke(memAddress+480,0);
        return;
}

method void dispose() {
	do Memory.deAlloc(this);
	return;
}


method void moveUp()
{
	if(y > 0){

	let y = y -1;
	do erase();
	do draw();

}
	return;
}

method void gravity()
{
	if(y<15){
	
	let y = y + 1;
	do erase();
	do draw();
}
	return;

}

method  int ypos() { return 16*y;}

}



